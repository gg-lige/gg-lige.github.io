<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>GG Blog</title>
    <description>GG is on the way to being a master! Every failure is leading towards success.</description>
    <link>http://localhost:4000/</link>
    <atom:link href="http://localhost:4000/feed.xml" rel="self" type="application/rss+xml" />
    <pubDate>Fri, 09 Mar 2018 16:27:26 +0800</pubDate>
    <lastBuildDate>Fri, 09 Mar 2018 16:27:26 +0800</lastBuildDate>
    <generator>Jekyll v3.7.2</generator>
    
      <item>
        <title>Hadoop- 2.2.0单节点安装</title>
        <description>&lt;blockquote&gt;

  &lt;p&gt;本文是Hadoop2单节点安装的说明手册。包括Hadoop 2.2.0版本的在单个计算节点上Standalone模式的安装过程，主要用于测试开发目的。
 生产环境的安装请参考其他文档。&lt;/p&gt;

&lt;/blockquote&gt;

&lt;h1 id=&quot;系统需求&quot;&gt;系统需求&lt;/h1&gt;
&lt;p&gt;以下说明Hadoop 2.2.0安装的基本需求。&lt;/p&gt;
&lt;h3 id=&quot;系统硬件&quot;&gt;系统硬件&lt;/h3&gt;
&lt;p&gt;Intel x86_64服务器。&lt;/p&gt;
&lt;h3 id=&quot;系统软件&quot;&gt;系统软件&lt;/h3&gt;
&lt;p&gt;建议采用Ubuntu 12.04.3 LTS Server x64版本或者其他长期支持版本。
另外，如果是虚拟机环境，使用32位版本的Ubuntu即可。&lt;/p&gt;

&lt;p&gt;系统环境&lt;/p&gt;

&lt;p&gt;建议在安装前，将系统升级到最新：&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ sudo apt-get update
$ sudo apt-get upgrade
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h1 id=&quot;安装与配置&quot;&gt;安装与配置&lt;/h1&gt;
&lt;p&gt;Hadoop 2.2.0的安装开始之前，需要安装一些必要的组件。&lt;/p&gt;
&lt;h3 id=&quot;准备工作&quot;&gt;准备工作&lt;/h3&gt;
&lt;p&gt;1.权限&lt;/p&gt;

&lt;p&gt;建议将/opt修改为用户的：{用户名：用户组名}&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ sudo chown happy:happy /opt
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;2.Java&lt;/p&gt;

&lt;p&gt;建议采用Oracle Java JDK6以上版本。&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ chmod 755 jdk-7u45-linux-x64.bin
./jdk-7u45-linux-x64.bin
mv jdk1.7.0_45 /opt
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;则JAVA_HOME地址可以如下配置，在/etc/profile中修改：&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ sudo vim /etc/profile
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;在末尾加入：&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;export JAVA_HOME=/opt/jdk1.7.0_45
export JRE_HOME=$JAVA_HOME/jre
export CLASSPATH=$CLASSPATH:$JAVA_HOME/lib:$JRE_HOME/lib
export PATH=$PATH:$JAVA_HOME/bin
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;注：如果是32位的Linux，请安装jdk-7u45-linux-i586的32位Java。
生效：&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ source /etc/profile
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;测试：&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ java -version
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;3.Hadoop 2.2.0&lt;/p&gt;

&lt;p&gt;从Apache官方可以下载到Hadoop 2.2.0的发布代码，或者在CNNIC下载：
&lt;img src=&quot;http://mirrors.cnnic.cn/apache/hadoop/common/hadoop-2.2.0/hadoop-2.2.0.tar.gz&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;CNNIC相对速度较快。附件中也提供该文件的下载。&lt;/p&gt;

&lt;p&gt;注：由于官方本的lib/native是32位，需要编译生成64位版本。所以建议直接
从本地其他服务器下载hadoop-2.2.0-x64.tar.gz&lt;/p&gt;

&lt;p&gt;4.Hadoop路径配置&lt;/p&gt;

&lt;p&gt;建议将Hadoop安装在/opt下，所以将/opt的属主修改为实际用户（本文以cloud用户为例）：&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ sudo chown cloud:cloud /opt
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;然后将下载的压缩包解压并放到/opt下：&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ tar xzvf hadoop-2.2.0.tar.gz
$ mv hadoop-2.2.0 /opt
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;然后建议使用软连接：{对源文件建立符号链接，源文件可以是目录也可以是目录，在执行此命令前，/opt/hadoop中不存在hadoop-2.2.0文件，执行后将/opt/hadoop-2.2.0链接到}&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ ln -s /opt/hadoop-2.2.0 /opt/hadoop
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;5.ssh本地互通&lt;/p&gt;

&lt;p&gt;Ubuntu桌面版没有sshd服务，需要先安装：&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ sudo apt-get install tasksel
$ sudo tasksel
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;选择安装SSH Server。&lt;/p&gt;

&lt;p&gt;配置公钥，用ssh-keygen命令生成公钥，使用默认配置即可：参数 -t rsa 表示使用rsa算法进行加密，执行后，会在/home/当前用户/.ssh目录下找到id_rsa(私钥)和id_rsa.pub(公钥）&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ cd ~
$ ssh-keygen -t rsa -P “”  
$ cd ~/.ssh
$ cat id_rsa.pub &amp;gt;&amp;gt; authorized_keys
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;然后执行以下命令：&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ ssh localhost
$ ssh hostname
$ ssh 0.0.0.0
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;首次连接需要输入yes确认，之后每次执行上述ssh命令应当不用输入密码。其中hostname是指/etc/hostname中本机的名称。&lt;/p&gt;

&lt;p&gt;6.全局变量&lt;/p&gt;

&lt;p&gt;在/etc/profile的末尾加入：&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;export HADOOP_HOME=/opt/hadoop
export PATH=$PATH:$HADOOP_HOME/bin:$HADOOP_HOME/sbin
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;确保可以在任意位置执行hadoop命令。
然后将配置文件启用：&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ source /etc/profile
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;7.目录配置&lt;/p&gt;

&lt;p&gt;创建Hadoop的数据存储目录，并修改属主权限：&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ sudo mkdir /hadoop
$ sudo chown cloud:cloud /hadoop
$ mkdir /hadoop/dfs
$ mkdir /hadoop/tmp
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;配置hadoop&quot;&gt;配置Hadoop&lt;/h3&gt;
&lt;p&gt;默认的配置无法直接启动，需要对部分参数进行修改。
查看虚拟机ip&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ ifconfig
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;修改/etc/hosts&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ sudo vim /etc/hosts
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;1.加入namenode的ip地址及其对应的主机名&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;192.168.191.128	happy
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;2.配置hadoop-env.sh&lt;/p&gt;

&lt;p&gt;修改hadoop-env.sh文件：&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ cd /opt/hadoop/etc/hadoop
$ vim hadoop-env.sh
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;将默认的JAVA_HOME修改为：&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;export JAVA_HOME=/opt/jdk1.7.0_45
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;3.配置core-site.xml&lt;/p&gt;

&lt;p&gt;修改core-site.xml文件：&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ cd /opt/hadoop/etc/hadoop
$ vim core-site.xml
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;在&lt;configuration&gt;标签中（即嵌套在该标签中）加入以下内容：&lt;/configuration&gt;&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;property&amp;gt;
  &amp;lt;name&amp;gt;hadoop.tmp.dir&amp;lt;/name&amp;gt;
  &amp;lt;value&amp;gt;/hadoop/tmp&amp;lt;/value&amp;gt;
  &amp;lt;description&amp;gt;temporary directories.&amp;lt;/description&amp;gt;
&amp;lt;/property&amp;gt;
&amp;lt;property&amp;gt;
  &amp;lt;name&amp;gt;fs.defaultFS&amp;lt;/name&amp;gt;
  &amp;lt;value&amp;gt;hdfs://happy:9000&amp;lt;/value&amp;gt;
  &amp;lt;description&amp;gt;The name of the defaultfile system. Either the literal string &quot;local&quot; or a host:port forNDFS.
  &amp;lt;/description&amp;gt;
  &amp;lt;final&amp;gt;true&amp;lt;/final&amp;gt;
&amp;lt;/property&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;更多配置信息，参考：&lt;img src=&quot;http://hadoop.apache.org/docs/r2.2.0/hadoop-project-dist/hadoop-common/core-default.xml&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;4.配置hdfs-site.xml&lt;/p&gt;

&lt;p&gt;修改hdfs-site.xml：&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ vim hdfs-site.xml
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;在&lt;configuration&gt;标签中（即嵌套在该标签中）加入以下内容：&lt;/configuration&gt;&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;property&amp;gt;
  &amp;lt;name&amp;gt;dfs.namenode.name.dir&amp;lt;/name&amp;gt;
  &amp;lt;value&amp;gt;file:/hadoop/dfs/name&amp;lt;/value&amp;gt;
  &amp;lt;description&amp;gt;Determineswhere on the local filesystem the DFS name node should store the name table.&amp;lt;/description&amp;gt;
  &amp;lt;final&amp;gt;true&amp;lt;/final&amp;gt;
&amp;lt;/property&amp;gt;

&amp;lt;property&amp;gt;
  &amp;lt;name&amp;gt;dfs.datanode.data.dir&amp;lt;/name&amp;gt;
  &amp;lt;value&amp;gt;file:/hadoop/dfs/data&amp;lt;/value&amp;gt;
  &amp;lt;description&amp;gt;Determineswhere on the local filesystem an DFS data node should store its blocks.
  &amp;lt;/description&amp;gt;
  &amp;lt;final&amp;gt;true&amp;lt;/final&amp;gt;
&amp;lt;/property&amp;gt;

&amp;lt;property&amp;gt;
  &amp;lt;name&amp;gt;dfs.replication&amp;lt;/name&amp;gt;
  &amp;lt;value&amp;gt;1&amp;lt;/value&amp;gt;
&amp;lt;/property&amp;gt;

&amp;lt;property&amp;gt;
  &amp;lt;name&amp;gt;dfs.permissions&amp;lt;/name&amp;gt;
  &amp;lt;value&amp;gt;false&amp;lt;/value&amp;gt;
&amp;lt;/property&amp;gt;

&amp;lt;property&amp;gt;
  &amp;lt;name&amp;gt;dfs.webhdfs.enabled&amp;lt;/name&amp;gt;
  &amp;lt;value&amp;gt;true&amp;lt;/value&amp;gt;
&amp;lt;/property&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;更多hdfs-site.xml的配置信息，参考：&lt;img src=&quot;http://hadoop.apache.org/docs/r2.2.0/hadoop-project-dist/hadoop-hdfs/hdfs-default.xml&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;5.配置mapred-site.xml&lt;/p&gt;

&lt;p&gt;默认不存在此文件，需要创建：&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ cp mapred-site.xml.template mapred-site.xml
$ vim mapred-site.xml
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;在&lt;configuration&gt;标签中（即嵌套在该标签中）加入以下内容：&lt;/configuration&gt;&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;property&amp;gt;
  &amp;lt;name&amp;gt;mapreduce.framework.name&amp;lt;/name&amp;gt;
  &amp;lt;value&amp;gt;yarn&amp;lt;/value&amp;gt;
&amp;lt;/property&amp;gt;

&amp;lt;property&amp;gt;
  &amp;lt;name&amp;gt;mapred.system.dir&amp;lt;/name&amp;gt;
  &amp;lt;value&amp;gt;file:/hadoop/mapred/system&amp;lt;/value&amp;gt;
  &amp;lt;final&amp;gt;true&amp;lt;/final&amp;gt;
&amp;lt;/property&amp;gt;

&amp;lt;property&amp;gt;
  &amp;lt;name&amp;gt;mapred.local.dir&amp;lt;/name&amp;gt;
  &amp;lt;value&amp;gt;file:/hadoop/mapred/local&amp;lt;/value&amp;gt;
  &amp;lt;final&amp;gt;true&amp;lt;/final&amp;gt;
&amp;lt;/property&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;6.配置yarn-site.xml
执行以下命令：&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ vim yarn-site.xml
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;在&lt;configuration&gt;标签中（即嵌套在该标签中）加入以下内容：&lt;/configuration&gt;&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;property&amp;gt;
  &amp;lt;name&amp;gt;yarn.nodemanager.aux-services&amp;lt;/name&amp;gt;
  &amp;lt;value&amp;gt;mapreduce_shuffle&amp;lt;/value&amp;gt;
  &amp;lt;description&amp;gt;shuffle service that needsto be set for Map Reduce to run &amp;lt;/description&amp;gt;
&amp;lt;/property&amp;gt;

&amp;lt;property&amp;gt;
  &amp;lt;name&amp;gt;yarn.resourcemanager.hostname&amp;lt;/name&amp;gt;
  &amp;lt;value&amp;gt;happy&amp;lt;/value&amp;gt;
  &amp;lt;description&amp;gt;hostanem of RM&amp;lt;/description&amp;gt;
&amp;lt;/property&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;yarn.resourcemanager.hostname配置后，其他端口号将使用默认。详见：
&lt;img src=&quot;http://hadoop.apache.org/docs/current/hadoop-yarn/hadoop-yarn-common/yarn-default.xml&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;7./etc/hadoop下在sudo vim slave中将localhost改为主机名master。&lt;/p&gt;
&lt;h3 id=&quot;初始化&quot;&gt;初始化&lt;/h3&gt;
&lt;p&gt;格式化NameNode：&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ hdfs namenode -format
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;h3 id=&quot;启动dfs&quot;&gt;启动DFS&lt;/h3&gt;
&lt;p&gt;1.测试启动&lt;/p&gt;

&lt;p&gt;启动Name Node：&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ hadoop-daemon.sh start namenode
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;启动Data Node：&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ hadoop-daemon.sh start datanode
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;使用jps查看进程是否启动：&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ jps
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;并在以下网页检查：
http://happy:50070/dfshealth.jsp
应能看到节点启动。
2.一般启动&lt;/p&gt;

&lt;p&gt;如果上述启动过程正常，则一般可以使用以下命令启动DFS：&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ start-dfs.sh
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;h3 id=&quot;启动yarn&quot;&gt;启动Yarn&lt;/h3&gt;
&lt;p&gt;1.测试启动&lt;/p&gt;

&lt;p&gt;执行以下命令：&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ yarn-daemon.sh start resourcemanager
$ yarn-daemon.sh start nodemanager
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;2.一般启动&lt;/p&gt;

&lt;p&gt;如果上述过程正常，则一般启动Yarn使用以下命令即可：&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ start-yarn.sh
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;异常处理&quot;&gt;异常处理&lt;/h3&gt;

&lt;p&gt;如果发生任何启动异常，关闭进程后，需要清空数据：[当有一个节点变换为三个节点的时候，注意先将所有节点中的dfs进行格式化]&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ rm -rf /hadoop/dfs/*
$ rm -rf /hadoop/tmp/*
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;然后重新执行格式化：&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ hdfs namenode -format
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
</description>
        <pubDate>Mon, 05 Mar 2018 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/2018/03/05/Hadoop-2.2.0%E5%8D%95%E8%8A%82%E7%82%B9%E5%AE%89%E8%A3%85/</link>
        <guid isPermaLink="true">http://localhost:4000/2018/03/05/Hadoop-2.2.0%E5%8D%95%E8%8A%82%E7%82%B9%E5%AE%89%E8%A3%85/</guid>
        
        <category>Hadoop</category>
        
        <category>HDFS</category>
        
        <category>YARN</category>
        
        
      </item>
    
      <item>
        <title>建立- Django项目</title>
        <description>&lt;blockquote&gt;

  &lt;p&gt;这是一个基于python Django 搭建的小型项目&lt;/p&gt;

&lt;/blockquote&gt;

&lt;h2 id=&quot;命令&quot;&gt;命令&lt;/h2&gt;

&lt;p&gt;E:\IDEAworkspace&amp;gt;cd learning_log&lt;/p&gt;

&lt;p&gt;E:\IDEAworkspace\learning_log&amp;gt;python -m venv ll_env&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;建立虚拟环境，名为ll_env&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;E:\IDEAworkspace\learning_log&amp;gt;ll_env\Scripts\activate&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;激活启动环境&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;(ll_env) E:\IDEAworkspace\learning_log&amp;gt;pip install Django&lt;/p&gt;

&lt;p&gt;(ll_env) E:\IDEAworkspace\learning_log&amp;gt;dir&lt;/p&gt;

&lt;p&gt;(ll_env) E:\IDEAworkspace\learning_log&amp;gt;django-admin.py startproject learning_log .&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;注意最后的点，让项目有合适的目录结构&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;(ll_env) E:\IDEAworkspace\learning_log&amp;gt;python manage.py migrate&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;创建数据库db.sqlite3.sqlLite 是一种使用单个文件的数据库&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;(ll_env) E:\IDEAworkspace\learning_log&amp;gt;python manage.py runserver （8002）&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;在http://127.0.0.1:8000/端口查看是否启动成功&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;(ll_env) E:\IDEAworkspace\learning_log&amp;gt;python manage.py startapp learning_logs&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;另开一个terimal 。输上述命令让Django 创建应用所需的基础设施&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;(ll_env) E:\IDEAworkspace\learning_log&amp;gt;python manage.py makemigrations learning_logs&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;让Django修改数据库，时期可以存储新定义的模型Topic&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;(ll_env) E:\IDEAworkspace\learning_log&amp;gt;python manage.py migrate&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;让Django迁移项目&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;(ll_env) E:\IDEAworkspace\learning_log&amp;gt;python manage.py createsuperuser&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;创建超级用户，通过http://127.0.0.1:8000/admin/    用户名/秘密：ll_admin/ll_admin&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;每次在model.py 中创建新的模型，都需要重新迁移数据库&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;(ll_env) E:\IDEAworkspace\learning_log&amp;gt;python manage.py makemigrations learning_logs&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;(ll_env) E:\IDEAworkspace\learning_log&amp;gt;python manage.py migrate&lt;/li&gt;
  &lt;li&gt;admin.py中注册一下，即可在管理员页面看到&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;交互式终端会话&quot;&gt;交互式终端会话&lt;/h2&gt;
&lt;p&gt;(ll_env) E:\IDEAworkspace\learning_log&amp;gt;python manage.py shell&lt;/p&gt;

&lt;p&gt;/»&amp;gt; from learning_logs.models import Topic&lt;/p&gt;

&lt;p&gt;/»&amp;gt; Topic.objects.all()&lt;/p&gt;

&lt;p&gt;&amp;lt;QuerySet [&lt;Topic: Chess=&quot;&quot;&gt;, &lt;Topic: Rock=&quot;&quot; Climbing=&quot;&quot;&gt;]&amp;gt;&lt;/Topic:&gt;&lt;/Topic:&gt;&lt;/p&gt;

&lt;p&gt;//»&amp;gt; topics=Topic.onjects.all()&lt;/p&gt;

&lt;p&gt;Traceback (most recent call last):&lt;/p&gt;

&lt;p&gt;File “&lt;console&gt;&quot;, line 1, in &lt;module&gt;&lt;/module&gt;&lt;/console&gt;&lt;/p&gt;

&lt;p&gt;AttributeError: type object ‘Topic’ has no attribute ‘onjects’&lt;/p&gt;

&lt;p&gt;/»&amp;gt; topics=Topic.objects.all()&lt;/p&gt;

&lt;p&gt;/»&amp;gt; for topic in topics:&lt;/p&gt;

&lt;p&gt;…     print(topic.id,topic)&lt;/p&gt;

&lt;p&gt;…&lt;/p&gt;

&lt;p&gt;1 Chess&lt;/p&gt;

&lt;p&gt;2 Rock Climbing&lt;/p&gt;

&lt;p&gt;/»&amp;gt; t=Topic.objects.get(id=1)&lt;/p&gt;

&lt;p&gt;/»&amp;gt; t.text&lt;/p&gt;

&lt;p&gt;‘Chess’&lt;/p&gt;

&lt;p&gt;/»&amp;gt; t.date_added&lt;/p&gt;

&lt;p&gt;datetime.datetime(2017, 12, 6, 2, 22, 41, 617396, tzinfo=&lt;UTC&gt;)&lt;/UTC&gt;&lt;/p&gt;

&lt;p&gt;/»&amp;gt; t.entry_set.all()&lt;/p&gt;

&lt;p&gt;&amp;lt;QuerySet [&amp;lt;Entry: 象棋，亦作“象碁”、中国象棋（英文名Chinese chess），中国传统棋类益智游戏，在中国有着悠…&amp;gt;, &amp;lt;Entry: 棋盘
棋子活动的场所，叫作“棋盘”。在长方形的平面上，绘有九条平行的竖线和十条平行的横线相交组成，…&amp;gt;]&amp;gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;通过外键关系获取时，可使用相关模型小写名称、下划线、单词set组合&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;部署&quot;&gt;部署&lt;/h2&gt;
&lt;p&gt;(ll_env) E:\IDEAworkspace\learning_log&amp;gt;pip install dj-database-url&lt;/p&gt;

&lt;p&gt;(ll_env) E:\IDEAworkspace\learning_log&amp;gt;pip install dj-static&lt;/p&gt;

&lt;p&gt;(ll_env) E:\IDEAworkspace\learning_log&amp;gt;pip install static3&lt;/p&gt;

&lt;p&gt;(ll_env) E:\IDEAworkspace\learning_log&amp;gt;pip install gunicorn&lt;/p&gt;

&lt;p&gt;(ll_env) E:\IDEAworkspace\learning_log&amp;gt;pip freeze &amp;gt; requirements.txt&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;命令freeze 将项目中当前安装的所有包名都写入到文件 requirements.txt中。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;步骤&quot;&gt;步骤&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;table&gt;
      &lt;tbody&gt;
        &lt;tr&gt;
          &lt;td&gt;curl -L https://packages.gitlab.com/install/repositories/runner/gitlab-runner/script.rpm.sh&lt;/td&gt;
          &lt;td&gt;sudo bash		&lt;可去掉sudo&gt;&lt;/可去掉sudo&gt;&lt;/td&gt;
        &lt;/tr&gt;
      &lt;/tbody&gt;
    &lt;/table&gt;
  &lt;/li&gt;
  &lt;li&gt;sudo yum install gitlab-runner&lt;/li&gt;
  &lt;li&gt;
    &lt;table&gt;
      &lt;tbody&gt;
        &lt;tr&gt;
          &lt;td&gt;yum list gitlab-runner –showduplicates&lt;/td&gt;
          &lt;td&gt;sort -r&lt;/td&gt;
        &lt;/tr&gt;
      &lt;/tbody&gt;
    &lt;/table&gt;
  &lt;/li&gt;
  &lt;li&gt;sudo yum install gitlab-runner-10.0.0-1&lt;/li&gt;
  &lt;li&gt;sudo gitlab-runner register&lt;/li&gt;
  &lt;li&gt;安装项目中所需库&lt;/li&gt;
  &lt;li&gt;执行运行项目（）的命令：nohup python3 /opt/learning_log/manage.py runserver &amp;amp;&amp;gt;/dev/null &amp;amp;&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Fri, 02 Mar 2018 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/2018/03/02/%E5%BB%BA%E7%AB%8B-Django-%E9%A1%B9%E7%9B%AE/</link>
        <guid isPermaLink="true">http://localhost:4000/2018/03/02/%E5%BB%BA%E7%AB%8B-Django-%E9%A1%B9%E7%9B%AE/</guid>
        
        <category>GitLab</category>
        
        <category>GitLab - CI</category>
        
        <category>GitLab - Runner</category>
        
        
      </item>
    
      <item>
        <title>使用- gitLab 部署项目</title>
        <description>&lt;blockquote&gt;
  &lt;p&gt;使用 gitlab-runner CI 部署项目&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;简介&quot;&gt;简介&lt;/h2&gt;

&lt;p&gt;gitlab-ci全称是gitlab continuous integration的意思，也就是持续集成。&lt;/p&gt;

&lt;p&gt;中心思想是当每一次push到gitlab的时候，都会触发一次脚本执行，然后脚本的内容包括了测试，编译，部署等一系列自定义的内容。&lt;/p&gt;

&lt;p&gt;本文就是利用gitlab-ci的持续集成来实现自动部署。相比之前webhook的自动部署还是强大以及方便了许多。&lt;/p&gt;

&lt;h2 id=&quot;原理&quot;&gt;原理&lt;/h2&gt;

&lt;p&gt;自动部署涉及了若干个角色，主要介绍如下&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;GitLab-CI&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;这个是一套配合GitLab使用的持续集成系统，是GitLab自带的，也就是你装GitLab的那台服务器上就带有的。无需多考虑。.gitlab-ci.yml的脚本解析就由它来负责。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;GitLab-Runner&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;这个是脚本执行的承载者，.gitlab-ci.yml的script部分的运行就是由runner来负责的。GitLab-CI浏览过项目里的.gitlab-ci.yml文件之后，根据里面的规则，分配到各个Runner来运行相应的脚本script。这些脚本有的是测试项目用的，有的是部署用的。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;.gitlab-ci.yml&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;这个是在git项目的根目录下的一个文件，记录了一系列的阶段和执行规则。GitLab-CI在push后会解析它，根据里面的内容调用runner来运行,添加文件.&lt;/p&gt;

&lt;h2 id=&quot;步骤&quot;&gt;步骤&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;table&gt;
      &lt;tbody&gt;
        &lt;tr&gt;
          &lt;td&gt;curl -L https://packages.gitlab.com/install/repositories/runner/gitlab-runner/script.rpm.sh&lt;/td&gt;
          &lt;td&gt;sudo bash		&lt;可去掉sudo&gt;&lt;/可去掉sudo&gt;&lt;/td&gt;
        &lt;/tr&gt;
      &lt;/tbody&gt;
    &lt;/table&gt;
  &lt;/li&gt;
  &lt;li&gt;sudo yum install gitlab-runner&lt;/li&gt;
  &lt;li&gt;
    &lt;table&gt;
      &lt;tbody&gt;
        &lt;tr&gt;
          &lt;td&gt;yum list gitlab-runner –showduplicates&lt;/td&gt;
          &lt;td&gt;sort -r&lt;/td&gt;
        &lt;/tr&gt;
      &lt;/tbody&gt;
    &lt;/table&gt;
  &lt;/li&gt;
  &lt;li&gt;sudo yum install gitlab-runner-10.0.0-1&lt;/li&gt;
  &lt;li&gt;sudo gitlab-runner register&lt;/li&gt;
  &lt;li&gt;安装项目中所需库&lt;/li&gt;
  &lt;li&gt;执行运行项目（）的命令：nohup python3 /opt/learning_log/manage.py runserver &amp;amp;&amp;gt;/dev/null &amp;amp;&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Thu, 01 Mar 2018 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/2018/03/01/%E4%BD%BF%E7%94%A8-gitLab-%E9%83%A8%E7%BD%B2%E9%A1%B9%E7%9B%AE/</link>
        <guid isPermaLink="true">http://localhost:4000/2018/03/01/%E4%BD%BF%E7%94%A8-gitLab-%E9%83%A8%E7%BD%B2%E9%A1%B9%E7%9B%AE/</guid>
        
        <category>GitLab</category>
        
        <category>GitLab - CI</category>
        
        <category>GitLab - Runner</category>
        
        
      </item>
    
      <item>
        <title>使用git gui上传文件</title>
        <description>&lt;blockquote&gt;
  &lt;p&gt;使用 git gui 方便版本控制操作&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;eclipse-中上传项目&quot;&gt;Eclipse 中上传项目&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;ol&gt;
      &lt;li&gt;建立ssh连接【可由Eclipse配好ssh（windows-preferences-SSH2），将.ssh中的公钥拷贝到gitLab的ssh中】&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;ol&gt;
      &lt;li&gt;fork需要修改的项目到自己的远程仓库下 OR 不需fork,在项目下new branch  -lg&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;ol&gt;
      &lt;li&gt;eclipse中git下载项目【从自己的远程仓库下载到本地仓库】&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;ol&gt;
      &lt;li&gt;完成某次代码修改。项目名-右键-Team-commit-commit and push 选择相应的URI和GitLab的账号&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;ol&gt;
      &lt;li&gt;完成某阶段修改，需要merge。&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;git-gui&quot;&gt;Git Gui&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;clone ：克隆（clone）在需要建立库的目录下点击右键选择：“Git Gui”,在弹出窗口点击“克隆已经版本库”, 然后在Source Location中输入完整的待克隆版本库所在地址，在Target Directory中输入或选择本地的目录（请注意此处会自动新建一个目录，不需要提前建立！）&lt;/li&gt;
  &lt;li&gt;默认克隆得到的是master分支，所以现在需要创建自己的分支（lg分支），修改代码时，只在lg分支上进行修改。点branch  create 在本地创建分支&lt;/li&gt;
  &lt;li&gt;切换分支：branch -checkout  -lg 确定。&lt;/li&gt;
  &lt;li&gt;完成修改，首先commit .
-再次fetch master仓库的代码&lt;/li&gt;
  &lt;li&gt;merge –local merge.&lt;/li&gt;
  &lt;li&gt;Remote – Push 给origin（这时会在远程端建立lg分支）&lt;/li&gt;
  &lt;li&gt;在gitLab客户端 ，选择lg分支merge request给master分支。&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;上传至不同-gitlab-或-github-远程仓库&quot;&gt;上传至不同 gitlab 或 github 远程仓库&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;Remote-add-Name填写远程仓库的（自己起名）和远程仓库的位置，最后commit-putsh 至 自己起名的远程仓库。&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Thu, 01 Mar 2018 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/2018/03/01/%E4%BD%BF%E7%94%A8-git-gui%E4%B8%8A%E4%BC%A0%E6%96%87%E4%BB%B6/</link>
        <guid isPermaLink="true">http://localhost:4000/2018/03/01/%E4%BD%BF%E7%94%A8-git-gui%E4%B8%8A%E4%BC%A0%E6%96%87%E4%BB%B6/</guid>
        
        <category>Git Gui</category>
        
        <category>Github</category>
        
        <category>Eclipse</category>
        
        
      </item>
    
      <item>
        <title>使用 .gitignore 忽略 Git 仓库中的文件</title>
        <description>&lt;blockquote&gt;
  &lt;p&gt;使用 &lt;code class=&quot;highlighter-rouge&quot;&gt;.gitignore&lt;/code&gt; 文件忽略指定文件&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;gitignore&quot;&gt;.gitignore&lt;/h2&gt;

&lt;p&gt;在Git中，很多时候你只想将代码提交到仓库，而不是将当前文件目录下的文件全部提交到Git仓库中，例如在MacOS系统下面的&lt;code class=&quot;highlighter-rouge&quot;&gt;.DS_Store&lt;/code&gt;文件，或者是Xocde的操作记录，又或者是pod库的中一大串的源代码。这种情况下使用&lt;code class=&quot;highlighter-rouge&quot;&gt;.gitignore&lt;/code&gt;就能够在Git提交时自动忽略掉这些文件。&lt;/p&gt;

&lt;h2 id=&quot;忽略的格式&quot;&gt;忽略的格式&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;#&lt;/code&gt; :此为注释 – 将被 Git 忽略&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;*.a&lt;/code&gt; :忽略所有 &lt;code class=&quot;highlighter-rouge&quot;&gt;.a&lt;/code&gt; 结尾的文件&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;!lib.a&lt;/code&gt; : 不忽略 &lt;code class=&quot;highlighter-rouge&quot;&gt;lib.a&lt;/code&gt; 文件&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;/TODO&lt;/code&gt; :仅仅忽略项目根目录下的 &lt;code class=&quot;highlighter-rouge&quot;&gt;TODO&lt;/code&gt; 文件,不包括 &lt;code class=&quot;highlighter-rouge&quot;&gt;subdir/TODO&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;build/&lt;/code&gt; : 忽略 &lt;code class=&quot;highlighter-rouge&quot;&gt;build/&lt;/code&gt; 目录下的所有文件&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;doc/*.txt&lt;/code&gt; : 会忽略 &lt;code class=&quot;highlighter-rouge&quot;&gt;doc/notes.txt&lt;/code&gt; 但不包括 &lt;code class=&quot;highlighter-rouge&quot;&gt;doc/server/arch.txt&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;创建方法&quot;&gt;创建方法&lt;/h2&gt;

&lt;h4 id=&quot;从-github-上获取&quot;&gt;从 &lt;a href=&quot;https://github.com/github/gitignore.git&quot;&gt;github&lt;/a&gt; 上获取&lt;/h4&gt;

&lt;p&gt;github上整理了一些常用需要的项目中需要忽略的文件配置，根据需要进行获取&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;https://github.com/github/gitignore.git
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;与 Xcode 相关的三个文件&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Xcode.gitignore&lt;/li&gt;
  &lt;li&gt;Objective-C.gitignore&lt;/li&gt;
  &lt;li&gt;Swift.gitignore&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Xcode.gitignore&lt;/code&gt;忽略 &lt;code class=&quot;highlighter-rouge&quot;&gt;Xcode&lt;/code&gt; 配置信息，如操作记录，默认打开窗口等&lt;/p&gt;

&lt;p&gt;其他两个在 &lt;code class=&quot;highlighter-rouge&quot;&gt;Xcode.gitignore&lt;/code&gt; 基础上针对不同的语言进行忽略&lt;/p&gt;

&lt;p&gt;将这些文件重写命名为 &lt;code class=&quot;highlighter-rouge&quot;&gt;.gittignore&lt;/code&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ mv Swift.gitignore .gittignore
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;通过-gitignoreio-创建推荐&quot;&gt;通过 &lt;a href=&quot;https://www.gitignore.io/&quot;&gt;gitignore.io&lt;/a&gt; 创建（推荐）&lt;/h4&gt;

&lt;h6 id=&quot;先自定义终端命令&quot;&gt;先自定义终端命令：&lt;/h6&gt;

&lt;p&gt;macOS下默认是&lt;code class=&quot;highlighter-rouge&quot;&gt;\#!/bin/bash&lt;/code&gt;：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ echo &quot;function gi() { curl -L -s https://www.gitignore.io/api/\$@ ;}&quot; &amp;gt;&amp;gt; ~/.bash_profile &amp;amp;&amp;amp; source ~/.bash_profile
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;如果是 &lt;code class=&quot;highlighter-rouge&quot;&gt;&lt;span class=&quot;c&quot;&gt;#!/bin/zsh&lt;/span&gt;&lt;/code&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ echo &quot;function gi() { curl -L -s https://www.gitignore.io/api/\$@ ;}&quot; &amp;gt;&amp;gt; ~/.zshrc &amp;amp;&amp;amp; source ~/.zshrc
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h6 id=&quot;使用&quot;&gt;使用&lt;/h6&gt;

&lt;p&gt;在当前终端目录下&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ gi swift &amp;gt; .gitignore
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;就会针对 Swifit 类型的工程创建 &lt;code class=&quot;highlighter-rouge&quot;&gt;.gitignore&lt;/code&gt; 文件。&lt;/p&gt;
</description>
        <pubDate>Wed, 28 Feb 2018 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/2018/02/28/%E4%BD%BF%E7%94%A8-.gitignore-%E5%BF%BD%E7%95%A5-git-%E4%BB%93%E5%BA%93%E4%B8%AD%E7%9A%84%E6%96%87%E4%BB%B6/</link>
        <guid isPermaLink="true">http://localhost:4000/2018/02/28/%E4%BD%BF%E7%94%A8-.gitignore-%E5%BF%BD%E7%95%A5-git-%E4%BB%93%E5%BA%93%E4%B8%AD%E7%9A%84%E6%96%87%E4%BB%B6/</guid>
        
        <category>Git</category>
        
        <category>Github</category>
        
        
      </item>
    
      <item>
        <title>Git指令整理</title>
        <description>&lt;blockquote&gt;
  &lt;p&gt;随便整理的一些自用的Git指令&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h1 id=&quot;github创建仓库提示代码&quot;&gt;GitHub创建仓库提示代码&lt;/h1&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;echo &quot;# 项目名&quot; &amp;gt;&amp;gt; README.md
git init
git add README.md
git commit -m &quot;first commit&quot;
git remote add origin git@github.com:qiubaiying/项目名.git
git push -u origin master
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;若仓库存在直接push&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;git remote add origin git@github.com:qiubaiying/test.git
git push -u origin master
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h1 id=&quot;常用操作&quot;&gt;常用操作&lt;/h1&gt;

&lt;h4 id=&quot;创建仓库初始化&quot;&gt;创建仓库（初始化）&lt;/h4&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;在当前指定目录下创建
git init

新建一个仓库目录
git init [project-name]

克隆一个远程项目
git clone [url]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;添加文件到缓存区&quot;&gt;添加文件到缓存区&lt;/h4&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;添加所有变化的文件
 	git add .

添加名称指定文件
git add text.txt
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;配置&quot;&gt;配置&lt;/h4&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;设置提交代码时的用户信息
git config [--global] user.name &quot;[name]&quot;
git config [--global] user.email &quot;[email address]&quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;提交&quot;&gt;提交&lt;/h4&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;提交暂存区到仓库区
git commit -m &quot;msg&quot;

# 提交暂存区的指定文件到仓库区
$ git commit [file1] [file2] ... -m [message]

# 提交工作区自上次commit之后的变化，直接到仓库区
$ git commit -a

# 提交时显示所有diff信息
$ git commit -v

# 使用一次新的commit，替代上一次提交
# 如果代码没有任何新变化，则用来改写上一次commit的提交信息
$ git commit --amend -m [message]

# 重做上一次commit，并包括指定文件的新变化
$ git commit --amend [file1] [file2] ...
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;远程同步&quot;&gt;远程同步&lt;/h4&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# 下载远程仓库的所有变动
$ git fetch [remote]

# 显示所有远程仓库
$ git remote -v

# 显示某个远程仓库的信息
$ git remote show [remote]

# 增加一个新的远程仓库，并命名
$ git remote add [shortname] [url]

# 取回远程仓库的变化，并与本地分支合并
$ git pull [remote] [branch]

# 上传本地指定分支到远程仓库
$ git push [remote] [branch]

# 强行推送当前分支到远程仓库，即使有冲突
$ git push [remote] --force

# 推送所有分支到远程仓库
$ git push [remote] --all
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;分支&quot;&gt;分支&lt;/h4&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# 列出所有本地分支
$ git branch

# 列出所有远程分支
$ git branch -r

# 列出所有本地分支和远程分支
$ git branch -a

# 新建一个分支，但依然停留在当前分支
$ git branch [branch-name]

# 新建一个分支，并切换到该分支
$ git checkout -b [branch]

# 新建一个分支，指向指定commit
$ git branch [branch] [commit]

# 新建一个分支，与指定的远程分支建立追踪关系
$ git branch --track [branch] [remote-branch]

# 切换到指定分支，并更新工作区
$ git checkout [branch-name]

# 切换到上一个分支
$ git checkout -

# 建立追踪关系，在现有分支与指定的远程分支之间
$ git branch --set-upstream [branch] [remote-branch]

# 合并指定分支到当前分支
$ git merge [branch]

# 选择一个commit，合并进当前分支
$ git cherry-pick [commit]

# 删除分支
$ git branch -d [branch-name]

# 删除远程分支
$ git push origin --delete [branch-name]
$ git branch -dr [remote/branch]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;标签tags&quot;&gt;标签Tags&lt;/h4&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;添加标签 在当前commit
git tag -a v1.0 -m 'xxx' 

添加标签 在指定commit
git tag v1.0 [commit]

查看
git tag

删除
git tag -d V1.0

删除远程tag
git push origin :refs/tags/[tagName]

推送
git push origin --tags

拉取
git fetch origin tag V1.0

新建一个分支，指向某个tag
git checkout -b [branch] [tag]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;查看信息&quot;&gt;查看信息&lt;/h4&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# 显示有变更的文件
$ git status

# 显示当前分支的版本历史
$ git log

# 显示commit历史，以及每次commit发生变更的文件
$ git log --stat

# 搜索提交历史，根据关键词
$ git log -S [keyword]

# 显示某个commit之后的所有变动，每个commit占据一行
$ git log [tag] HEAD --pretty=format:%s

# 显示某个commit之后的所有变动，其&quot;提交说明&quot;必须符合搜索条件
$ git log [tag] HEAD --grep feature

# 显示某个文件的版本历史，包括文件改名
$ git log --follow [file]
$ git whatchanged [file]

# 显示指定文件相关的每一次diff
$ git log -p [file]

# 显示过去5次提交
$ git log -5 --pretty --oneline

# 显示所有提交过的用户，按提交次数排序
$ git shortlog -sn

# 显示指定文件是什么人在什么时间修改过
$ git blame [file]

# 显示暂存区和工作区的差异
$ git diff

# 显示暂存区和上一个commit的差异
$ git diff --cached [file]

# 显示工作区与当前分支最新commit之间的差异
$ git diff HEAD

# 显示两次提交之间的差异
$ git diff [first-branch]...[second-branch]

# 显示今天你写了多少行代码
$ git diff --shortstat &quot;@{0 day ago}&quot;

# 显示某次提交的元数据和内容变化
$ git show [commit]

# 显示某次提交发生变化的文件
$ git show --name-only [commit]

# 显示某次提交时，某个文件的内容
$ git show [commit]:[filename]

# 显示当前分支的最近几次提交
$ git reflog
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;撤销&quot;&gt;撤销&lt;/h4&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# 恢复暂存区的指定文件到工作区
$ git checkout [file]

# 恢复某个commit的指定文件到暂存区和工作区
$ git checkout [commit] [file]

# 恢复暂存区的所有文件到工作区
$ git checkout .

# 重置暂存区的指定文件，与上一次commit保持一致，但工作区不变
$ git reset [file]

# 重置暂存区与工作区，与上一次commit保持一致
$ git reset --hard

# 重置当前分支的指针为指定commit，同时重置暂存区，但工作区不变
$ git reset [commit]

# 重置当前分支的HEAD为指定commit，同时重置暂存区和工作区，与指定commit一致
$ git reset --hard [commit]

# 重置当前HEAD为指定commit，但保持暂存区和工作区不变
$ git reset --keep [commit]

# 新建一个commit，用来撤销指定commit
# 后者的所有变化都将被前者抵消，并且应用到当前分支
$ git revert [commit]

# 暂时将未提交的变化移除，稍后再移入
$ git stash
$ git stash pop
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;其他&quot;&gt;其他&lt;/h4&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# 生成一个可供发布的压缩包
$ git archives
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
</description>
        <pubDate>Tue, 27 Feb 2018 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/2018/02/27/Git%E6%8C%87%E4%BB%A4%E6%95%B4%E7%90%86/</link>
        <guid isPermaLink="true">http://localhost:4000/2018/02/27/Git%E6%8C%87%E4%BB%A4%E6%95%B4%E7%90%86/</guid>
        
        <category>Git</category>
        
        
      </item>
    
      <item>
        <title>Git 代码回滚</title>
        <description>&lt;blockquote&gt;
  &lt;p&gt;并不适合阅读的个人文档。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h1 id=&quot;git-revert-和-git-reset-的区别&quot;&gt;&lt;strong&gt;git revert&lt;/strong&gt; 和 &lt;strong&gt;git reset&lt;/strong&gt; 的区别&lt;/h1&gt;
&lt;p&gt;先看图：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://ww3.sinaimg.cn/large/006tNbRwgy1fcr9tu6vdjj30t30ez0y8.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;sourceTree&lt;/strong&gt; 中 &lt;strong&gt;revert&lt;/strong&gt; 译为&lt;strong&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;提交回滚&lt;/code&gt;&lt;/strong&gt;，作用为忽略你指定的版本，然后提交一个新的版本。新的版本中已近删除了你所指定的版本。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;reset&lt;/strong&gt; 为 &lt;strong&gt;重置到这次提交&lt;/strong&gt;，将内容重置到指定的版本。&lt;code class=&quot;highlighter-rouge&quot;&gt;git reset&lt;/code&gt; 命令后面是需要加2种参数的：&lt;code class=&quot;highlighter-rouge&quot;&gt;–-hard&lt;/code&gt; 和 &lt;code class=&quot;highlighter-rouge&quot;&gt;–-soft&lt;/code&gt;。这条命令默认情况下是 &lt;code class=&quot;highlighter-rouge&quot;&gt;-–soft&lt;/code&gt;。&lt;/p&gt;

&lt;p&gt;执行上述命令时，这该条commit号之 后（时间作为参考点）的所有commit的修改都会退回到git缓冲区中。使用&lt;code class=&quot;highlighter-rouge&quot;&gt;git status&lt;/code&gt; 命令可以在缓冲区中看到这些修改。而如果加上&lt;code class=&quot;highlighter-rouge&quot;&gt;-–hard&lt;/code&gt;参数，则缓冲区中不会存储这些修改，git会直接丢弃这部分内容。可以使用 &lt;code class=&quot;highlighter-rouge&quot;&gt;git push origin HEAD --force&lt;/code&gt; 强制将分区内容推送到远程服务器。&lt;/p&gt;

&lt;h4 id=&quot;代码回退&quot;&gt;代码回退&lt;/h4&gt;

&lt;p&gt;默认参数 &lt;code class=&quot;highlighter-rouge&quot;&gt;-soft&lt;/code&gt;,所有commit的修改都会退回到git缓冲区
参数&lt;code class=&quot;highlighter-rouge&quot;&gt;--hard&lt;/code&gt;，所有commit的修改直接丢弃&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ git reset --hard HEAD^ 		回退到上个版本
$ git reset --hard commit_id	退到/进到 指定commit_id 推送到远程	

$ git push origin HEAD --force
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;可以吃的后悔药-版本穿梭&quot;&gt;可以吃的后悔药-&amp;gt;版本穿梭&lt;/h4&gt;

&lt;p&gt;当你回滚之后，又后悔了，想恢复到新的版本怎么办？&lt;/p&gt;

&lt;p&gt;用&lt;code class=&quot;highlighter-rouge&quot;&gt;git reflog&lt;/code&gt;打印你记录你的每一次操作记录&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ git reflog

输出：
c7edbfe HEAD@{0}: reset: moving to c7edbfefab1bdbef6cb60d2a7bb97aa80f022687
470e9c2 HEAD@{1}: reset: moving to 470e9c2
b45959e HEAD@{2}: revert: Revert &quot;add img&quot;
470e9c2 HEAD@{3}: reset: moving to 470e9c2
2c26183 HEAD@{4}: reset: moving to 2c26183
0f67bb7 HEAD@{5}: revert: Revert &quot;add img&quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;找到你操作的id如：&lt;code class=&quot;highlighter-rouge&quot;&gt;b45959e&lt;/code&gt;，就可以回退到这个版本&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ git reset --hard b45959e
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

</description>
        <pubDate>Tue, 27 Feb 2018 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/2018/02/27/Git-%E4%BB%A3%E7%A0%81%E5%9B%9E%E6%BB%9A/</link>
        <guid isPermaLink="true">http://localhost:4000/2018/02/27/Git-%E4%BB%A3%E7%A0%81%E5%9B%9E%E6%BB%9A/</guid>
        
        <category>Git</category>
        
        
      </item>
    
      <item>
        <title>高级算法</title>
        <description>&lt;h1 id=&quot;高级算法&quot;&gt;高级算法&lt;/h1&gt;
&lt;p&gt;1.包含四种算法：==数值概率算法==（数值问题的求解，最优化问题的近似解）、==蒙特罗卡Monte Carlo算法==（判定问题的准确解，不一定正确）、==拉斯维加斯Las Vegas算法==（不一定会得到解，但得到的解一定是正确解）、==舍伍德Sherwood算法==（总能求得一个解，且一定是正确解，主要作用是减少或是消除好的和坏的实例之间的差别）&lt;/p&gt;
</description>
        <pubDate>Sun, 25 Feb 2018 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/2018/02/25/%E9%AB%98%E7%BA%A7%E7%AE%97%E6%B3%95/</link>
        <guid isPermaLink="true">http://localhost:4000/2018/02/25/%E9%AB%98%E7%BA%A7%E7%AE%97%E6%B3%95/</guid>
        
        <category>高级算法</category>
        
        
      </item>
    
      <item>
        <title>队列</title>
        <description>&lt;h1 id=&quot;队列&quot;&gt;队列&lt;/h1&gt;
&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;假设==循环队列==的队尾指针是rear，队头是front，其中QueueSize为循环队列的最大长度。&lt;br /&gt;
(1) 入队时队尾指针前进1：(rear+1)%QueueSize&lt;br /&gt;
(2) 出队时队头指针前进1：(front+1)%QueueSize&lt;br /&gt;
(3) 队列长度：(rear-front+QueueSize)%QueueSize&lt;br /&gt;
(4) 队满条件为：(rear+1)%QueueSize==front&lt;br /&gt;
(5) 队空条件为：front == rear&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;普通队列: 满队列的条件QU-&amp;gt;rear － QU-&amp;gt;front = = m0&lt;/li&gt;
  &lt;li&gt;在链队列中,即使不设置尾指针也能进行入队操作:遍历整个队列，当一个元素的next为null时，则此元素为最后一个，在其后面添加新的元素。&lt;/li&gt;
&lt;/ol&gt;
</description>
        <pubDate>Sun, 25 Feb 2018 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/2018/02/25/%E9%98%9F%E5%88%97/</link>
        <guid isPermaLink="true">http://localhost:4000/2018/02/25/%E9%98%9F%E5%88%97/</guid>
        
        <category>队列</category>
        
        
      </item>
    
      <item>
        <title>链表</title>
        <description>&lt;h1 id=&quot;链表&quot;&gt;链表&lt;/h1&gt;
&lt;ol&gt;
  &lt;li&gt;二分查找又称折半查找，优点是比较次数少，查找速度快，平均性能好；其缺点是要求==待查表为有序表、顺序存储结构==，且插入删除困难。&lt;/li&gt;
  &lt;li&gt;线性表中利用==带头结点的双循环链表==存储方式最省时间。&lt;/li&gt;
  &lt;li&gt;线性表的顺序存储结构是一种==随机存取、顺序存储==的存储结构。顺序存储指内存地址是一块的，随机存取指访问时可以按下标随机访问。&lt;/li&gt;
  &lt;li&gt;线性表有两种存储结构：
1.==顺序存储结构—顺序表==。顺序表以数组形式出现，可以取任意下标访问，所以是一种随机存取的存储结构。
2.==链式存储结构—链表==。链表以链表的形式出现，必须从头开始访问，所以是一种顺序存取的存储结构。&lt;/li&gt;
  &lt;li&gt;链表head为空的判定条件：==带头结点单链表==：head-&amp;gt;next == NULL；==带头结点循环链表==：head-&amp;gt;next == head；==不带头结点单链表==：head==NULL。&lt;/li&gt;
  &lt;li&gt;顺序存储结构在物理上一般是连续存储，而链式存储一般不占用连续空间，相对而言，顺序存储的存储密度就大，链式存储不但要存储节点的值，还有对应的指针信息。 同样的内存空间，顺序存储不需要额外的信息。&lt;/li&gt;
  &lt;li&gt;链表方便删除和插入，只需知道结点和要插入的信息即可；长度可变，一般链表是动态分配内存空间；链表的结点信息至少包含数据域和指针域，相同数据下：数组的大小是链表大小的子集。&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;广义表：表==头可以为表或单元素值==，表==尾是指除去表头后剩下的元素组成的表==（即使只剩一个元素也视为表），可以为空表。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;==线性结构==指的是数据元素之间存在着“一对一”的线性关系的数据结构。
常用的线性结构有：==线性表，栈，队列，双队列，数组，串。==
==非线性结构==的逻辑特征是一个结点元素可能对应多个直接前驱和多个后继。
如==树，表，多维数组==等。&lt;/li&gt;
  &lt;li&gt;区别==长度无穷大和无限列表==，由于计算机资源的限制，长度无穷大的广义表==不能==在计算机中实现。 但是如果考虑这样一个广义表 E = (a, E) ——这是一个==递归的表==，它的长度是 2 。E相当于一个无限的列表 E = (a, (a, (a, …)))，这个广义表是==可以在计算机中实现==的。&lt;/li&gt;
  &lt;li&gt;ArrayList由数组实现，LinkedList由链表实现，数组的访问速度比链表快，==HashMap允许将null用作键或值。==&lt;/li&gt;
  &lt;li&gt;==链接存储结构==是在计算机中用一组任意的存储单元存储线性表的数据元素。
链式存储结构特点：&lt;br /&gt;
1、比顺序存储结构的==存储密度小== (每个节点都由数据域和指针域组成，所以相同空间内假设全存满的话顺序比链式存储更多)。
2、逻辑上相邻的节点物理上不必相邻。
3、插入、删除灵活 (不必移动节点，只要改变节点中的指针)。
4、查找结点时链式存储要比顺序存储慢。
5、每个结点是由数据域和指针域组成。&lt;/li&gt;
  &lt;li&gt;广义表中：==长度==：去掉一层括号剩下的是几部分。 
==深度==：去掉几层括号可以到最后一部分。&lt;/li&gt;
&lt;/ol&gt;
</description>
        <pubDate>Sun, 25 Feb 2018 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/2018/02/25/%E9%93%BE%E8%A1%A8/</link>
        <guid isPermaLink="true">http://localhost:4000/2018/02/25/%E9%93%BE%E8%A1%A8/</guid>
        
        <category>链表</category>
        
        
      </item>
    
  </channel>
</rss>
